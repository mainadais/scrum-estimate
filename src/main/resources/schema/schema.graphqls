input AddAccount {
    username: String!,
    password: String!,
    player: ID!
}

input AddParticipant {
    player: ID!,
    team: ID!
}

input CreatePlayer {
    firstName: String,
    lastName: String,
    emailAddress: String!
}

input CreateTeam {
    name: String!,
    choices: [String],
    organizer: ID!
}

input DropParticipant {
    player: ID!,
    team: ID!
}

input SubmitVote {
    participant: ID!,
    team: ID!,
    vote: String!
}

input UpdatePassword {
    oldPassword: String!
    newPassword: String!,
    player: ID!
}

input UpdatePlayer {
    firstName: String!,
    lastName: String!,
    player: ID!
}

input RecoverLogin {
    emailAddress: String!
    newPassword: String
    emailToken: ID
}

enum Role {PLAYER, ADMIN, USER, GUEST}

input UpdateRole {
    role: Role!,
    player: ID!
}

enum Status {active, disabled, pending_confirmation, expired, locked}

input UpdateStatus {
    status: Status!,
    player: ID!
}

input UpdateTeam {
    name: String!,
    choices: [String]!,
    team: ID!
}

type Account {
    id: ID!,
    username: String!,
    password: String!,
    status: Status!
}

type Participant {
    id: ID!,
    player: ID!,
    team: ID!,
    vote: String
}

type Player {
    id: ID!,
    firstName: String,
    lastName: String,
    emailAddress: String!,
    account: Account,
    role: Role!,
    dateCreated: String
}

type Team {
    id: ID!,
    name: String!,
    organizer: ID!,
    participants: [Participant],
    choices: [String],
    dateCreated: String
}

type Vote {
    id: ID!
    participant: ID!,
    team: String!,
    vote: String!
}

type Recovery {
    result: String!
}

interface Result {
    error: String
}

interface ListResult {
    error: String
}

type IntResult implements Result {
    data: Int
    error: String
}

type PlayerResult implements Result {
    data: Player
    error: String
}

type PlayerListResult implements ListResult {
    data: [Player]
    error: String
}

type TeamResult implements Result{
    data: Team
    error: String
}

type TeamListResult implements ListResult{
    data: [Team]
    error: String
}

type VoteListResult implements ListResult{
    data: [Vote]
    error: String
}

type RecoveryResult implements Result{
    data: Recovery
    error: String
}

type JwtUserDetails {
    username: String!
    role: Role!
    status: Status!
    token: String!
}

type Query {
    findById(playerId: ID!): PlayerResult
    findByEmail(emailAddress: String): PlayerResult
    findByUsername(username: String): PlayerResult
    findPlayersByTeam(teamId: ID): PlayerListResult

    findTeamById(teamId: ID): TeamResult
    findTeamByName(organizerId: ID!, teamName: String!): TeamResult
    findTeamsByOrganizer(organizerId: ID!): TeamListResult
    findTeamsJoined(playerId: ID!): TeamListResult
}

type Mutation {
    login(emailAddress: String!, password: String!): JwtUserDetails

    addAccount(addAccount: AddAccount ): PlayerResult
    updatePassword(updatePassword: UpdatePassword): PlayerResult
    createPlayer(createPlayer: CreatePlayer): PlayerResult
    updatePlayer(updatePlayer: UpdatePlayer ): PlayerResult
    updateStatus(updateStatus: UpdateStatus ):PlayerResult
    updateRole(updateRole: UpdateRole ):PlayerResult
    deletePlayer(playerId: ID ): IntResult
    recoverLogin(recoverLogin: RecoverLogin): RecoveryResult

    createTeam(createTeam: CreateTeam!): TeamResult
    updateTeam(updateTeam: UpdateTeam!): TeamResult
    addParticipant(addParticipant: AddParticipant!): TeamResult
    dropParticipant(dropParticipant: DropParticipant!): TeamResult
    clearParticipants(teamId: ID!): TeamResult
    dropTeam(teamId: ID!): IntResult
    joinTeam(playerId: ID!, teamId: ID!): TeamResult
    submitVote(submitVote: SubmitVote): TeamResult

    publishVotes(teamId: ID!): Boolean
}

type Subscription {
    voting: VoteListResult
}